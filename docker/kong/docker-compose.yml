version: '2.1'

services:
  kong-migrations:
    restart: on-failure
    image: "${KONG_DOCKER_TAG}"
    container_name: kong-db-int
    command: kong migrations bootstrap
    depends_on:
      db:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
    links:
      - db:db
    networks:
      - kong-net

  kong:
    restart: always
    image: "${KONG_DOCKER_TAG}"
    container_name: kong-sever
    user: "${KONG_USER:-root}"
    depends_on:
      db:
        condition: service_healthy
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"

  db:
    restart: always
    image: postgres:9.5
    container_name: kong-db
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD}
      POSTGRES_USER: ${KONG_PG_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER}"]
      interval: 30s
      timeout: 30s
      retries: 3
    stdin_open: true
    tty: true
    volumes:
      - ./kong_data:/var/lib/postgresql/data
    networks:
      - kong-net

  kong-admin-ui:
    restart: always
    image: pocketdigi/kong-admin-ui:0.3
    container_name: kong-ui
    networks:
      - kong-net
    ports:
      - 80:80

networks:
  kong-net: